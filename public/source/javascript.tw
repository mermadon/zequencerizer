
:: UserScript [script] {"position":"25,1550"}
/*File Structure Functions*/
if (document.location.href.toLowerCase().includes("/temp/") || document.location.href.toLowerCase().includes("/private/") || hasOwnProperty.call(window, "storyFormat")) {
	// Change this to the path where the HTML file is
	// located if you want to run this from inside Twine.
	setup.Path = "file:///C:/Users/mac/CodeResource";  // Running inside Twine application
} else { 
	setup.Path = "media/";  // Running in a browser
}
setup.ImagePath = setup.Path + "images/";
setup.SoundPath = setup.Path + "sounds/";

/* Set up a handler for the enabling and disabling of the history-backward/-forward buttons. */
jQuery(document)
	.on(':historyupdate.ui-bar',
		(function ($backward, $forward) {
			return function () {
				$backward.prop('disabled', State.length < 2);
				$forward.prop('disabled', State.length === State.size);
			};
		})(jQuery('#history-backward'), jQuery('#history-forward'))
	);
/* Set up a handler for the selection of the history-backward button. */

jQuery('#history-backward')
	.prop('disabled', State.length < 2)
	.ariaClick({
		label : L10n.get('uiBarBackward')
	}, function () {
		Engine.backward()
	});

/* Set up a handler for the selection of the history-forward button. */
jQuery('#history-forward')
	.prop('disabled', State.length === State.size)
	.ariaClick({
		label : L10n.get('uiBarForward')
	}, function () {
		Engine.forward()
	});

jQuery('#menu-item-restart')
	.prop('enabled', State.length === State.size)
	.ariaClick({
		label : L10n.get('uiBarRestart')
	}, function () {
		Engine.restart()
	});

/*Fountain Functions*/
;(function() {
  'use strict';

  var regex = {
    title_page: /^((?:title|credit|author[s]?|source|notes|draft date|date|contact|copyright)\:)/gim,

    scene_heading: /^((?:\*{0,3}_?)?(?:(?:int|ext|est|i\/e)[. ]).+)|^(?:\.(?!\.+))(.+)/i,
    scene_number: /( *#(.+)# *)/,

    transition: /^((?:FADE (?:TO BLACK|OUT)|CUT TO BLACK)\.|.+ TO\:)|^(?:> *)(.+)/,
    
    dialogue: /^([A-Z*_]+[0-9A-Z (._\-')]*)(\^?)?(?:\n(?!\n+))([\s\S]+)/,
    parenthetical: /^(\(.+\))$/,

    action: /^(.+)/g,
    centered: /^(?:> *)(.+)(?: *<)(\n.+)*/g,
        
    section: /^(#+)(?: *)(.*)/,
    synopsis: /^(?:\=(?!\=+) *)(.*)/,

    boneyard: /(^\/\*|^\*\/)$/g,

    page_break: /^\={3,}$/,
    line_break: /^ {2}$/,

    emphasis: /(_|\*{1,3}|_\*{1,3}|\*{1,3}_)(.+)(_|\*{1,3}|_\*{1,3}|\*{1,3}_)/g,
    bold_italic_underline: /(_{1}\*{3}(?=.+\*{3}_{1})|\*{3}_{1}(?=.+_{1}\*{3}))(.+?)(\*{3}_{1}|_{1}\*{3})/g,
    bold_underline: /(_{1}\*{2}(?=.+\*{2}_{1})|\*{2}_{1}(?=.+_{1}\*{2}))(.+?)(\*{2}_{1}|_{1}\*{2})/g,
    italic_underline: /(?:_{1}\*{1}(?=.+\*{1}_{1})|\*{1}_{1}(?=.+_{1}\*{1}))(.+?)(\*{1}_{1}|_{1}\*{1})/g,
    bold_italic: /(\*{3}(?=.+\*{3}))(.+?)(\*{3})/g,
    bold: /(\*{2}(?=.+\*{2}))(.+?)(\*{2})/g,
    italic: /(\*{1}(?=.+\*{1}))(.+?)(\*{1})/g,
    underline: /(_{1}(?=.+_{1}))(.+?)(_{1})/g,

    splitter: /\n{2,}/g,
    cleaner: /^\n+|\n+$/,
    standardizer: /\r\n|\r/g,
    whitespacer: /^\t+|^ {3,}/gm
  };

  var lexer = function (script) {
    return script.replace(regex.boneyard, '\n$1\n')
                 .replace(regex.standardizer, '\n')
                 .replace(regex.cleaner, '')
                 .replace(regex.whitespacer, '');
  };
     
  var tokenize = function (script) {
    var src    = lexer(script).split(regex.splitter)
      , i      = src.length, line, match, parts, text, meta, x, xlen, dual
      , tokens = [];

    while (i--) {
      line = src[i];
      
      // title page
      if (regex.title_page.test(line)) {
        match = line.replace(regex.title_page, '\n$1').split(regex.splitter).reverse();
        for (x = 0, xlen = match.length; x < xlen; x++) {
          parts = match[x].replace(regex.cleaner, '').split(/\:\n*/);
          tokens.push({ type: parts[0].trim().toLowerCase().replace(' ', '_'), text: parts[1].trim() });
        }
        continue;
      }

      // scene headings
      if (match = line.match(regex.scene_heading)) {
        text = match[1] || match[2];

        if (text.indexOf('  ') !== text.length - 2) {
          if (meta = text.match(regex.scene_number)) {
            meta = meta[2];
            text = text.replace(regex.scene_number, '');
          }
          tokens.push({ type: 'scene_heading', text: text, scene_number: meta || undefined });
        }
        continue;
      }

      // centered
      if (match = line.match(regex.centered)) {
        tokens.push({ type: 'centered', text: match[0].replace(/>|</g, '') });
        continue;
      }

      // transitions
      if (match = line.match(regex.transition)) {
        tokens.push({ type: 'transition', text: match[1] || match[2] });
        continue;
      }
    
      // dialogue blocks - characters, parentheticals and dialogue
      if (match = line.match(regex.dialogue)) {
        if (match[1].indexOf('  ') !== match[1].length - 2) {
          // we're iterating from the bottom up, so we need to push these backwards
          if (match[2]) {
            tokens.push({ type: 'dual_dialogue_end' });
          }

          tokens.push({ type: 'dialogue_end' });

          parts = match[3].split(/(\(.+\))(?:\n+)/).reverse();

          for (x = 0, xlen = parts.length; x < xlen; x++) { 
            text = parts[x];

            if (text.length > 0) {
              tokens.push({ type: regex.parenthetical.test(text) ? 'parenthetical' : 'dialogue', text: text });
            }
          }

          tokens.push({ type: 'character', text: match[1].trim() });
          tokens.push({ type: 'dialogue_begin', dual: match[2] ? 'right' : dual ? 'left' : undefined });

          if (dual) {
            tokens.push({ type: 'dual_dialogue_begin' });
          }

          dual = match[2] ? true : false;
          continue;
        }
      }
      
      // section
      if (match = line.match(regex.section)) {
        tokens.push({ type: 'section', text: match[2], depth: match[1].length });
        continue;
      }
      
      // synopsis
      if (match = line.match(regex.synopsis)) {
        tokens.push({ type: 'synopsis', text: match[1] });
        continue;
      }

      // boneyard
      if (match = line.match(regex.boneyard)) {
        tokens.push({ type: match[0][0] === '/' ? 'boneyard_begin' : 'boneyard_end' });
        continue;
      }      

      // page breaks
      if (regex.page_break.test(line)) {
        tokens.push({ type: 'page_break' });
        continue;
      }
      
      // line breaks
      if (regex.line_break.test(line)) {
        tokens.push({ type: 'line_break' });
        continue;
      }

      tokens.push({ type: 'action', text: line });
    }

    return tokens;
  };

  var inline = {
    note: '<!-- $1 -->',

    line_break: '<br />',

    bold_italic_underline: '<span class=\"bold italic underline\">$2</span>',
    bold_underline: '<span class=\"bold underline\">$2</span>',
    italic_underline: '<span class=\"italic underline\">$2</span>',
    bold_italic: '<span class=\"bold italic\">$2</span>',
    bold: '<span class=\"bold\">$2</span>',
    italic: '<span class=\"italic\">$2</span>',
    underline: '<span class=\"underline\">$2</span>'
  };

  inline.lexer = function (s) {
    if (!s) {
      return;
    }  

    var styles = [ 'underline', 'italic', 'bold', 'bold_italic', 'italic_underline', 'bold_underline', 'bold_italic_underline' ]
           , i = styles.length, style, match;

    s = s.replace(regex.note_inline, inline.note).replace(/\\\*/g, '[star]').replace(/\\_/g, '[underline]').replace(/\n/g, inline.line_break);

   // if (regex.emphasis.test(s)) {                         // this was causing only every other occurence of an emphasis syntax to be parsed
      while (i--) {
        style = styles[i];
        match = regex[style];
   
        if (match.test(s)) {
          s = s.replace(match, inline[style]);
        }
      }
   // }

    return s.replace(/\[star\]/g, '*').replace(/\[underline\]/g, '_').trim();
  };

  var parse = function (script, toks, callback) {
    if (callback === undefined && typeof toks === 'function') {
      callback = toks;
      toks = undefined;
    }
      
    var tokens = tokenize(script)
      , i      = tokens.length, token
      , title, title_page = [], html = [], output;

    while (i--) {
      token = tokens[i];
      token.text = inline.lexer(token.text);

      switch (token.type) {
        case 'title': title_page.push('<h1>' + token.text + '</h1>'); title = token.text.replace('<br />', ' ').replace(/<(?:.|\n)*?>/g, ''); break;
        case 'credit': title_page.push('<p class=\"credit\">' + token.text + '</p>'); break;
        case 'author': title_page.push('<p class=\"authors\">' + token.text + '</p>'); break;
        case 'authors': title_page.push('<p class=\"authors\">' + token.text + '</p>'); break;
        case 'source': title_page.push('<p class=\"source\">' + token.text + '</p>'); break;
        case 'notes': title_page.push('<p class=\"notes\">' + token.text + '</p>'); break;
        case 'draft_date': title_page.push('<p class=\"draft-date\">' + token.text + '</p>'); break;
        case 'date': title_page.push('<p class=\"date\">' + token.text + '</p>'); break;
        case 'contact': title_page.push('<p class=\"contact\">' + token.text + '</p>'); break;
        case 'copyright': title_page.push('<p class=\"copyright\">' + token.text + '</p>'); break;

        case 'scene_heading': html.push('<h3' + (token.scene_number ? ' id=\"' + token.scene_number + '\">' : '>') + token.text + '</h3>'); break;
        case 'transition': html.push('<h2>' + token.text + '</h2>'); break;

        case 'dual_dialogue_begin': html.push('<div class=\"dual-dialogue\">'); break;
        case 'dialogue_begin': html.push('<div class=\"dialogue' + (token.dual ? ' ' + token.dual : '') + '\">'); break;
        case 'character': html.push('<h4>' + token.text + '</h4>'); break;
        case 'parenthetical': html.push('<p class=\"parenthetical\">' + token.text + '</p>'); break;
        case 'dialogue': html.push('<p>' + token.text + '</p>'); break;
        case 'dialogue_end': html.push('</div> '); break;
        case 'dual_dialogue_end': html.push('</div> '); break;

        case 'section': html.push('<p class=\"section\" data-depth=\"' + token.depth + '\">' + token.text + '</p>'); break;
        case 'synopsis': html.push('<p class=\"synopsis\">' + token.text + '</p>'); break;

        case 'boneyard_begin': html.push('<!-- '); break;
        case 'boneyard_end': html.push(' -->'); break;

        case 'action': html.push('<p>' + token.text + '</p>'); break;
        case 'centered': html.push('<p class=\"centered\">' + token.text + '</p>'); break;
        
        case 'page_break': html.push('<hr />'); break;
        case 'line_break': html.push('<br />'); break;
      }
    }

    output = { title: title, html: { title_page: title_page.join(''), script: html.join('') }, tokens: toks ? tokens.reverse() : undefined };

    if (typeof callback === 'function') {
      return callback(output);
    }

    return output;
  };

  var fountain = function (script, callback) {
    return fountain.parse(script, callback);
  };
    
  fountain.parse = function (script, tokens, callback) {
    return parse(script, tokens, callback);
  };

  if (typeof module !== 'undefined') {
    module.exports = fountain;
  } else {
    this.fountain = fountain;
  }  
}).call(window);

Config.passages.onProcess = function (p) {
return fountain(p.text).html.script;
};

/*Inventory System for Badge Creation*/

(function () {
    // simple-inventory.js, by chapel; for sugarcube 2
    // version 2.3.0
    'use strict';

    // options object

    var options = {
        tryGlobal : true,
        defaultStrings : {
            empty     : 'Nothing yet, keep playing!',
            listDrop  : 'Discard',
            separator : '\n'
        }
    };

    // private functions

    function _attachEvent (inv, loc, items, cont) {
        // attach special inventory change events to the document
        $(document).trigger({
            type       : (cont === 'initialized') ?  ':inventory-init' : ':inventory-update', // the event name
            instance   : inv, // the calling instance; the giver in transfers
            receiving  : loc, // the inventory recieving transfers, or null
            moved      : items, // the items moved to or from the calling inventory, or null
            context    : cont // drop, pickup, transfer, or initialized
        });
    }

    function _getUID (name, i) {
        // generates a random, unique-enough-for-this-purpose ID
        var key = Math.random().toString(36).substring(7);
        if (arguments.length < 2) {
            // we'll generate an id anyway, but it might not be as unique as i'd like.
            name = Math.random().toString(36).substring(7);
            i    = random(99);
        }
        return ('simple-inv-' + i + '-' + Date.now() + '-' + name.replace(/[^A-Za-z0-9]/g, '') + '-' + key);
    }

    // constructor

    function Inventory (array) {
        if (array) {
            // some number of arguments were passed
            array = [].slice.call(arguments);
            array = array.flatten();
        } else { 
            // no arguments were passed
            array = [];
        }
        
        if (this instanceof Inventory) {
            this.inv = array;
            array = (array.length) ? array : null;
            // run the event only if assignement is successful
            _attachEvent(this, null, array, 'initialized');
        } else { // if the author forgets the 'new' operator, add it for them
            return new Inventory(array);
        }
    }

    // static methods

    Object.assign(Inventory, {
        is : function (inv) {
            // test to see if passed object is an inventory instance
            return (inv instanceof Inventory);
        },
        log : function (inv) {
            // logs the inventory to the console (for debugging)
            var string = (Inventory.is(inv)) ?
                ('Inventory.log() -> ' + inv.toArray().join(' - ')) : 
                ('Inventory.log() -> object is not an inventory...');
            return string;
        },
        removeDuplicates : function (inv) {
            // removes duplicate items from an inventory
            if (!Inventory.is(inv)) {
                return; // not an inventory
            }
            var items = inv.toArray();
            var uniq  = (function (i) {
                var ret = [];
                i.forEach( function (item) {
                    if (!ret.includes(item)) {
                        ret.push(item);
                    }
                });
                return ret;
            }(items));
            
            return uniq;
        }
    });

    Object.assign(Inventory.prototype, {
        transfer : function (loc) {
            // transfer items from this inventory to a specified inventory
            if (arguments.length < 2) {
                return this; // error in args, do nothing
            }   
            if (!Inventory.is(loc)) {
                return this; // error in args, do nothing
            }
            
            var items = [].slice.call(arguments);
            items = items.slice(1).flatten();
            
            var pushed = [];
            for (var i = 0, l = items.length; i < l; i++) {
                // only transfer the item if it exists
                if (this.inv.includes(items[i])) { 
                    this.inv.delete(items[i]);
                    pushed.push(items[i]);
                }
            }
            
            if (pushed.length) {
                loc.inv = loc.inv.concat(pushed);
                _attachEvent(this, loc, pushed, 'transfer');
                return this; // for chaining
            }
            return this; // for chaining
        },
        
        has : function () { // this inventory has any of the passed items
            var items = [].slice.call(arguments).flatten();
            if (items && items.length) {
                return this.inv.includesAny(items);
            }
            return false;
        },
        
        hasAll : function () { // this inventory has all of the passed items
            var items = [].slice.call(arguments).flatten();
            if (items && items.length) {
                return this.inv.includesAll(items);
            }
            return false;
        },
        
        pickUp : function (unique) { // add items to this inventory
            var items = [].slice.call(arguments).flatten(), inventory = this;
            if (items && items.length) {
                if (unique === 'unique' || items[0] === 'unique') { // items must be unique in each inventory instance
                    items = items.splice(1);
                    items = (function (items) { 
                        var ret = []; // this code could use some cleanup
                        items.forEach(function (item) {
                            if (!inventory.inv.includes(item) && !ret.includes(item)) {
                                ret.push(item);
                            }
                        });
                        return ret;
                    }(items));
                }
                // concat the arrays and call the event
                this.inv = this.inv.concat(items);
                _attachEvent(this, null, items, 'pickup');
            }
            return this; // for chaining
        },
        
        drop : function () { // remove items from this inventory
            var items = [].slice.call(arguments).flatten(),
                inventory = this, del; // we need to access this in the <array>.forEach()
            if (items && items.length) {
                var moved = [];
                items.forEach(function (item) {
                    if (inventory.has(item)) {
                        moved.push(item); // for the event below
                        del = inventory.inv.indexOf(item);
                        inventory.inv.deleteAt(del);
                    }
                });
                _attachEvent(this, null, moved, 'drop');
            }
            return this; // for chaining
        },
        
        sort : function () { // sorts this inventory
            this.inv = this.inv.sort();
            _attachEvent(this, null, null, 'sort');
            return this;
        },
        
        show : function (sep) { // returns a string representing the inventory
            if (!sep || typeof sep !== 'string') {
                sep = options.defaultStrings.separator; // default
            }
            if (this.inv.length) {
                return this.inv.join(sep);
            }
            return options.defaultStrings.empty; // nothing is in this inventory
        },
        
        empty : function () { // remove all items from this inventory
            var temp = clone(this.inv); // for the event
            this.inv = []; 
            // this is still technically a 'drop' event
            _attachEvent(this, null, temp, 'drop');
            return this; // for that sweet chaining action
        },
        
        toArray : function () { // not super necessary
            return (this.inv);
        },

        count : function (item) {
            // if item, count the number of duplicates
            if (item && typeof item === 'string') {
                var cnt = 0;
                this.toArray().forEach( function (i) {
                    if (i === item) {
                        cnt++;
                    }
                });
                return cnt;
            }
            // else return the length
            return this.toArray().length;
        },

        isEmpty : function () {
            return this.toArray().length === 0;
        },
        
        linkedList : function (loc, action) { // construct the list elements to keep the macro call clean-ish
            if (!loc || !Inventory.is(loc)) {
                loc = false; // if no loc, then no transferring
            }
            
            // set up vars
            var list = this.toArray();
            var inv = this;
            var $wrapper = $(document.createElement('span'));
            
            // if inventory is empty, append message and return element
            if (!list || !list.length) {
                $wrapper.wiki(options.defaultStrings.empty);
                return $wrapper;
            }
            
            // construct the link list
            list.forEach(function (item, idx, arr) {
                var $listing = $(document.createElement('span')),
                    $link    = $(document.createElement('a')),
                    drop     = (action) ? action : options.defaultStrings.drop, // the action name or default
                    UID      = _getUID(item, idx); // create a unique element ID 
                
                $link // create the drop link
                    .wiki(drop)
                    .addClass('simple-inv drop-link');
                
                // add click event handler
                $link.ariaClick(function () {
                    if (loc) {
                        inv.transfer(loc, item);
                    } else {
                        inv.drop(item);
                    }
                    $('#' + UID).empty(); // empty the listing by its UID
                });
                
                // set up the listing element, which contains the name and the link
                $listing
                    .attr('id', UID)
                    .addClass('simple-inv link-listing')
                    .wiki(item + ' ')
                    .append($link);
                
                // add newline via <br> for listings that aren't last
                // this also allows the newline to disappear with its associated listing when dropped
                if (idx < arr.length - 1) {
                    $listing.wiki('<br />');
                }
                
                // attach to the return element
                $wrapper.append($listing);
            });
            
            // return the whole element
            return $wrapper;
        },
        
        // we need to reassign this since we may have clobbered it using the prototype
        constructor : Inventory,
        
        toJSON : function () { // the custom revive wrapper for SugarCube's state tracking
            // use `setup` version in case the global version is unavailable
            return JSON.reviveWrapper('new setup.Inventory(' + JSON.stringify(this.inv) + ')');
        },
        
        clone : function () { return new Inventory(this.inv); }
    });

    // JS APIs

    setup.Inventory = Inventory;
    setup.simpleInv = { inventory : Inventory }; // legacy

    if (options.tryGlobal) {
        // this allows authors to access the JS API using the global Inventory function
        window.Inventory = window.Inventory || Inventory;
        // ... but only if window.Inventory is undefined
    }

    // macros

    // <<newinventory '$var' '(optional) list of items'>>
    Macro.add('newinventory', {
        handler : function () {

            if (this.args.length < 1) {
                return this.error('incorrect number of arguments');
            }
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // set up new inventory
            Wikifier.setValue(varName, new Inventory(this.args.slice(1).flatten()));
        }
    });

    // <<pickup '$var' 'list of items'>>
    Macro.add('pickup', {
        handler : function () {
            
            if (this.args.length < 2) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            inv.pickUp(this.args.slice(1).flatten());
        }
    });

    // <<drop '$var' 'list of items'>>
    Macro.add('drop', {
        handler : function () {
            
            if (this.args.length < 2) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            inv.drop(this.args.slice(1).flatten());
        }
    });

    // <<transfer '$var' '$anotherVar' 'list of items'>>
    Macro.add('transfer', {
        handler : function () {
            
            if (this.args.length < 3) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            /* the receiving inventory */
            var recVarName = this.args[1].trim();
            // check variable string
            if (recVarName[0] !== '$' && recVarName[0] !== '_') {
                return this.error('variable name "' + this.args[1] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var recInv = Wikifier.getValue(recVarName);
            if (!Inventory.is(recInv)) {
                return this.error('variable ' + recVarName + ' is not an inventory!');
            }
            
            inv.transfer(recInv, this.args.slice(2).flatten());
        }
    });

    // <<dropall '$var'>>
    Macro.add('dropall', {
        handler : function () {
            
            if (this.args.length !== 1) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            inv.empty();
        }
    });

    // <<clear>> (same as <<dropall>>)
    Macro.add('clear', 'dropall', false);

    // <<sort '$var'>>
    Macro.add('sort', {
        handler : function () {
            
            if (this.args.length !== 1) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            inv.sort();
        }
    });

    // <<inventory '$var' 'separator'>>
    Macro.add('inventory', {
        handler : function () {
            
            if (this.args.length < 1 || this.args.length > 2) {
                return this.error('incorrect number of arguments');
            }
            
            var varName = this.args[0].trim();
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[0] + '" is missing its sigil ($ or _)');
            }
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            // create output element and add to DOM
            var $wrapper = $(document.createElement('span')), 
                sep = (this.args[1]) ? this.args[1] : false;
            
            $wrapper
                .wiki(inv.show(sep))
                .addClass('macro-' + this.name)
                .appendTo(this.output);
        }
    });

    // <<linkedinventory 'action name' '$var' '(optional) $anotherVar'
    Macro.add('linkedinventory', {
        handler : function () {
            
            if (this.args.length < 2 || this.args.length > 3) {
                return this.error('incorrect number of arguments');
            }
            
            var recInv = false,
                recVarName = '',
                varName = this.args[1].trim(),
                action = (typeof this.args[0] === 'string') ? this.args[0] : false; // the action name, which is required
            
            if (!action) { // just in case
                return this.error('first argument should be the link text');
            }
            
            // check variable string
            if (varName[0] !== '$' && varName[0] !== '_') {
                return this.error('variable name "' + this.args[1] + '" is missing its sigil ($ or _)');
            }
            
            // use a varID for linked lists
            var varID = Util.slugify(varName); 
            varID = this.name + '-' + varID;
            
            // check if story var is an inventory instance
            var inv = Wikifier.getValue(varName);
            if (!Inventory.is(inv)) {
                return this.error('variable ' + varName + ' is not an inventory!');
            }
            
            if (this.args.length > 2) {
                // the receiving inventory, if applicable
                recVarName = this.args[2].trim();
                // check variable string
                if (recVarName[0] !== '$' && recVarName[0] !== '_') {
                    return this.error('variable name "' + this.args[2] + '" is missing its sigil ($ or _)');
                }
                
                // check if story var is an inventory instance
                recInv = Wikifier.getValue(recVarName);
                if (!Inventory.is(recInv)) {
                    return this.error('variable ' + recVarName + ' is not an inventory!');
                }
            }
            
            // create output and att to DOM
            var $list = inv.linkedList(recInv, action);
            $list
                .attr({ // add data to reconstruct the call via an event
                    id : varID,
                    'data-rec' : recVarName,
                    'data-self' : varName,
                    'data-action' : action
                })
                .addClass('macro-' + this.name)
                .appendTo(this.output);
        }
    });

}());

/* Audio Functions */
// Check to see if trackID is currently loaded
window.TrackExists = function (trackID) {
	return SimpleAudio.tracks.has(trackID);
};

// Check to see if trackID is the currently playing track
window.isPlaying = function (trackID) {
	var track = SimpleAudio.tracks.get(trackID);
	return track !== null && track.isPlaying();
};
// volume slider, by chapel; for sugarcube 2
// version 1.1.0

/*
    Changelog:
    v1.1.0:
      - Fixed compatiblity issues with SugarCube version 2.28 (still compatible with older versions, too).
      - Added settings API integration for SugarCube 2.26.
      - Internal improvements and greater style consistency with my other work.
      - Added a pre-minified version.
      - By default, the slider is now more granual than before (101 possible positions vs 11).
        Change the `current` and `rangemax` options to 10 to restore the old feel.
*/

(function () {

    var vol = {};

    // options object
    var options = {
        current  : 70,
        rangeMax : 100,
        step     : 1,
        setting  : true
    };

    vol.last = options.current;
    vol.start = vol.last / options.rangeMax;

    function setVolume (val) {
        // fix for SugarCube 2.28 and higher
        if (typeof val !== 'number') {
            val = Number(val);
        }
        if (Number.isNaN(val) || val < 0) {
            val = 0;
        }
        if (val > 1) {
            val = 1;
        }

        try {
            if (SimpleAudio) {
                if (typeof SimpleAudio.volume === 'function') {
                    SimpleAudio.volume(val);
                } else {
                    SimpleAudio.volume = val;
                }
            } else {
                throw new Error('Cannot access audio API.');
            }
        } catch (err) {
            // fall back to the wikifier if we have to
            console.error(err.message, err);
            $.wiki('<<masteraudio volume ' + val + '>>');
        } finally {
            return val;
        }
    }

    postdisplay['volume-task'] = function (taskName) {
        delete postdisplay[taskName];
        setVolume(vol.start.toFixed(2));
    }

    $(document).on('input', 'input[name=volume]', function() {
        // grab new volume from input
        var change      = $('input[name=volume]').val();
        var newVol      = change / options.rangeMax;
        options.current = newVol.toFixed(2);

        // change volume; set slider position
        setVolume(options.current);
        vol.last = change;
    });

    Macro.add('volume', {
        handler : function () {
            
            // set up variables
            var $wrapper  = $(document.createElement('span'));
            var $slider   = $(document.createElement('input'));
            var className = 'macro-' + this.name;
            
            // create range input
            $slider
                .attr({
                    id    : 'volume-control',
                    type  : 'range',
                    name  : 'volume',
                    min   : '0',
                    max   : options.rangeMax,
                    step  : options.step,
                    value : vol.last
                });
            // class '.macro-volume' and id '#volume-control' for styling
                
            // output
            $wrapper
                .append($slider)
                .addClass(className)
                .appendTo(this.output);
        }
    });

    if (options.setting) {
        // settings API integration, for SugarCube 2.26 and higher
        if (Setting && Setting.addRange && typeof Setting.addRange === 'function') {
            
            function settingsVol () {
                var newVol = settings.volume / options.rangeMax;
                options.current = newVol.toFixed(2);
                setVolume(options.current);
            }

            Setting.addRange('volume', {
                label : 'Volume: ',
                min : 0,
                max : options.rangeMax,
                step : options.step,
                default : options.current,
                onInit : settingsVol,
                onChange : settingsVol
            });
        } else {
            console.error('This version of SugarCube does not include the `Settings.addRange()` method; please try updating to the latest version of SugarCube.')
        }
    }

}());

// fading macro set, by chapel; for SugarCube 2
// version 1.1.0
// see the documentation: https://github.com/ChapelR/custom-macros-for-sugarcube-2#fading-macros

// <<fadein>> macro
Macro.add('fadein', {
       tags : null,
    handler : function () {

        var $wrapper = $(document.createElement('span'));
        var content  = this.payload[0].contents, time, delay;

        if (this.args.length === 0) {
            return this.error('no arguments given');
        }
        
        time  = Util.fromCssTime(this.args[0]);
        delay = (this.args.length > 1) ?  Util.fromCssTime(this.args[1]) : 0;

        $wrapper
            .wiki(content)
            .addClass('macro-' + this.name)
            .appendTo(this.output)
            .hide()
            .delay(delay)
            .fadeIn(time);

    }
});

// <<fadeout>> macro
Macro.add('fadeout', {
       tags : null,
    handler : function () {

        var $wrapper = $(document.createElement('span'));
        var content  = this.payload[0].contents, time, delay;

        if (this.args.length === 0) {
            return this.error('no arguments given');
        }
        
        time  = Util.fromCssTime(this.args[0]);
        delay = (this.args.length > 1) ?  Util.fromCssTime(this.args[1]) : 0;

        $wrapper
            .wiki(content)
            .addClass('macro-' + this.name)
            .appendTo(this.output)
            .delay(delay)
            .fadeOut(time);

    }
});
(function () {
    // v1.0.1
    'use strict';

    // selectors to ignore
    var ignored = ['a', ':button', '*[role="button"]', '.continue-macro-ignore', '#ui-bar', '#ui-dialog'];

    var _i = 0;

    prehistory['%%continue-expiration'] = function () {
        _i = 0;
    };

    function ns () {
        // create unique namespace
        var namespace = '.' + Date.now().toString(36) + '-' + _i;
        _i++;
        return namespace;
    }

    function ignoreMe () {
        $(document).on('click.continue-macro keyup.continue-macro', ignored.join(', '), function (ev) { 
            ev.stopPropagation(); 
        });
    }

    function addIgnore () {
        if (State.length > 0) {
            return false;
        }
        var args = [].slice.call(arguments).flatten();
        ignored = ignored.concat(args);
        return true;
    }

    $(document).one(':passagerender', function () {
        // on first render, set up the ignore list
        ignoreMe();
    });

    // continue functions
    function cont (press, cb) {
        var namespace = ns();
        if (!cb || typeof cb !== 'function') {
            return;
        }
        var events = 'click.continue-macro' + namespace;
        if (press) {
            events = events + ' keyup.continue-macro' + namespace;
        }
        $(document).one(events, function () {
            cb.call();
            // expire all namespaced events
            $(document).off(namespace);
        });
    }

    function reset () {
        var args = [].slice.call(arguments).flatten();
        ignored = ignored.concat(args);
        $(document).off('.continue-macro');
        ignoreMe();
    }

    // macros

    // <<ignore selectors...>>
    Macro.add('ignore', {
        handler : function () {
            var check = addIgnore(this.args);
            if (!check) {
                return this.error('the <<ignore>> macro should only be run from StoryInit or equivalent.');
            }
        }
    });

    // <<cont [append] [press]>>Code<</cont>>
    Macro.add('cont', {
        tags : null,
        handler : function () {
            var append = this.args.includes('append'), // append keyword
                press = this.args.includesAny('key', 'keypress', 'press', 'button'), // keypress keyword
                wiki = this.payload[0].contents, // content to wikify
                $output; // output element (if needed)

            if (append) {
                // create output element, but only if needed (e.g. if appending content)
                $output = $(document.createElement('span'))
                    .addClass('macro-' + this.name)
                    .appendTo(this.output);
            }

            cont(press, this.createShadowWrapper( function () {
                // wikify 
                if (append && $output && $output instanceof $) {
                    $output.wiki(wiki);
                } else {
                    $.wiki(wiki);
                }
            }));
        }
    });

    // APIs

    setup.cont = cont;
    setup.cont.ignore = addIgnore;
    setup.cont.reset = reset;

    window.cont = window.cont || setup.cont;

}());

/*click to proceed */

(function () {
	"use strict";
	window.CTP = function (config) {
		this.id = "";
		this.selector = "";
		this.stack = [];
		this.head = "";
		this.tail = "";
		this.log = {
			clear: 0,
			index: 0,
			seen: 0,
			delayed: false
		};
		Object.keys(config).forEach(function (pn) {
			this[pn] = clone(config[pn]);
		}, this);
	};

	CTP.prototype.clone = function () {
		return new CTP(this);
	};

	CTP.prototype.toJSON = function () {
		var ownData = {};
		Object.keys(this).forEach(function (pn) {
			ownData[pn] = clone(this[pn]);
		}, this);
		return JSON.reviveWrapper('new CTP($ReviveData$)', ownData);
	};

	CTP.getCTP = function (id) {
		var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		if (!id || !id.trim()) throw new Error("No ID specified!");
		variables()["#macro-ctp-dump"] = variables()["#macro-ctp-dump"] || {};
		if (!variables()["#macro-ctp-dump"][id]) throw new Error("No CTP with ID '" + id + "' found!");
		return clone ? variables()["#macro-ctp-dump"][id].clone() : variables()["#macro-ctp-dump"][id];
	};

	CTP.contentObject = function (content) {
		var mods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
		mods = mods.split(/\s+/g);
		return {
			clear: mods.includes("clear") && !mods.includes("noClear"),
			nobr: mods.includes("nobr") && !mods.includes("br"),
			transition: mods.includesAny("t8n", "transition") && !mods.includesAny("noT8n", "noTransition"),
			delay: Util.fromCssTime(mods.find(function (el) {
				return /[0-9\.]+m?s/.test(el);
			}) || "0s"),
			re: mods.includes("redo"),
			content: content
		};
	};

	CTP.prototype.add = function (content) {
		var mods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
		var contentObj = CTP.contentObject(content, mods);
		contentObj.index = this.stack.length;
		this.stack.push(contentObj);
		return this;
	};

	CTP.item = function (item) {
		var noT8n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		if (!item) return "";
		var t8n = noT8n ? "" : item.transition ? "macro-ctp-entry-t8n" : "";
		var br = item.index === 0 || item.index === "head" || item.clear ? " " : item.nobr ? " " : '<br class="macro-ctp-entry-index-' + item.index + '">';
		var brAfter = item.index === "head" && !item.nobr ? "<br>" : " ";
		return br + '<span class="macro-ctp-visible macro-ctp-entry macro-ctp-entry-index-' + item.index + ' ' + t8n + '">' + item.content + '</span>' + brAfter;
	};

	CTP.prototype.entry = function (index) {
		var noT8n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		if (index < 0 || index >= this.stack.length) return "";
		var entry = this.stack[index];
		return CTP.item(entry, noT8n);
	};

	CTP.prototype.out = function () {
		return '<span class="macro-ctp-wrapper">' + '<span class="ctp-head"></span>' + '<span class="ctp-body">' + this.entry(0) + '</span>' + '<span class="ctp-tail"></span>' + '</span>';
	};

	CTP.prototype.go = function (diff) {
		if (!Number.isInteger(diff)) throw new Error(`Cannot move by non-integral amounts!`);
		if (diff > 0) {
			for (var i = 0; i < diff; i++) {
				this.advance(true);
			}
		} else if (diff < 0) {
			for (var _i = 0; _i < -diff; _i++) {
				this.back();
			}
		}
	};

	CTP.prototype.goTo = function (index) {
		this.go(index - this.log.index);
	};

	CTP.prototype.advance = function () {
		var noDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
		var _this = this;
		if (this.log.index === this.stack.length - 1 || this.log.delayed) return;
		var index = ++this.log.index;
		this.log.seen = Math.max(this.log.seen, index);
		var _el = $(this.selector).children(".ctp-body");
		if (this.stack[index].clear) {
			_el.children().removeClass("macro-ctp-visible").hide();
			this.log.clear = index - 1;
		}
		function delay(ctp) {
			ctp.log.delayed = false;
			$(ctp.selector).children(".ctp-body").wiki(ctp.entry(ctp.log.index)).siblings(".ctp-head").empty().wiki(CTP.item(ctp.head)).siblings(".ctp-tail").empty().wiki(CTP.item(ctp.tail));
		}
		if (noDelay) {
			delay(_this);
		} else {
			this.log.delayed = true;
			return new Promise(function (resolve, reject) {
				setTimeout(function () {
					delay(_this);
					resolve("advanced");
				}, _this.stack[index].delay);
			});
		}
	};

	CTP.prototype.back = function () {
		var _this3 = this;
		if (this.log.index <= 0 || this.log.delayed) return this;
		if (this.log.clear >= --this.log.index) {
			var clearIndex = 0;
			var _clear = this.stack.filter(function (el) {
				return el.clear && el.index < _this3.log.index + 1;
			});
			if (_clear.length) clearIndex = _clear[_clear.length - 1].index;
			this.stack.slice(clearIndex, this.log.index + 1).forEach(function (el) {
				$(_this3.selector).children(".ctp-body").children(".macro-ctp-entry-index-" + el.index).addClass("macro-ctp-visible").show();
			}, this);
		}
		var item = this.stack[this.log.index];
		if (item.re) $(this.selector).children(".ctp-body").children(".macro-ctp-entry.macro-ctp-entry-index-" + item.index).empty().wiki(item.content);
		this.stack.slice(this.log.index + 1, this.log.seen + 1).forEach(function (el) {
			$(_this3.selector).children(".ctp-body").children(".macro-ctp-entry-index-" + el.index).remove();
		}, this);
		$(this.selector).children(".ctp-head").empty().wiki(CTP.item(this.head)).siblings(".ctp-tail").empty().wiki(CTP.item(this.tail));
		return this;
	};

	Macro.add("ctp", {
		tags: ["ctpNext", "ctpHead", "ctpTail"],
		handler: function handler() {
			if (this.args.length === 0) return this.error("No ID specified!");
			var _id = this.args[0];
			var _data = 'data-ctp="' + Util.escape(_id) + '"';
			var ctp = new CTP({
				id: _id,
				selector: '[' + _data + ']'
			});
			var _overArgs = this.payload[0].args;
			_overArgs.reverse().pop();
			_overArgs = " " + _overArgs.join(" ");
			this.payload.forEach(function (el, index) {
				var _args = el.args.join(" ");
				switch (el.name) {
					case "ctpHead":
						{
							var _head = CTP.contentObject(el.contents.trim(), _args + _overArgs);
							_head.index = "head";
							ctp.head = _head;
							break;
						}
					case "ctpTail":
						{
							var _tail = CTP.contentObject(el.contents.trim(), _args + _overArgs);
							_tail.index = "tail";
							ctp.tail = _tail;
							break;
						}
					default:
						{
							ctp.add(el.contents.trim(), (el.name === "ctp" ? "" : _args) + _overArgs);
							break;
						}
				}
			});
			variables()["#macro-ctp-dump"] = variables()["#macro-ctp-dump"] || {};
			variables()["#macro-ctp-dump"][_id] = ctp;
			let out = $("<div />");
			out.wiki(ctp.out()).children(".macro-ctp-wrapper").attr("data-ctp", Util.escape(_id)).children(".ctp-head").wiki(CTP.item(ctp.head)).siblings(".ctp-tail").wiki(CTP.item(ctp.tail));
			$(this.output).append(out.children().unwrap());
		}
	});

	Macro.add("ctpAdvance", {
		handler: function handler() {
			try {
				var ctp = CTP.getCTP(this.args[0]);
				if (ctp) ctp.advance();
			} catch (ex) {
				throw new Error(_typeof(ex) === 'object' ? ex.message : ex);
			}
		}
	});

	Macro.add("ctpBack", {
		handler: function handler() {
			try {
				var ctp = CTP.getCTP(this.args[0]);
				if (ctp) ctp.back();
			} catch (ex) {
				throw new Error(_typeof(ex) === 'object' ? ex.message : ex);
			}
		}
	});

	$(document).on(':passageinit', function () {
		delete variables()["#macro-ctp-dump"];
	});
})();
// fading macro set, by chapel; for SugarCube 2
// version 1.1.0
// see the documentation: https://github.com/ChapelR/custom-macros-for-sugarcube-2#fading-macros


/* Create the Right UI Bar. */
var $rightUiBar = $('<div id="right-ui-bar" class="stowed"></div>').insertAfter("#ui-bar");

var rightTray = $rightUiBar.append('<div id="right-ui-bar-tray"><button id="right-ui-bar-toggle" tabindex="0" title="Toggle the Right UI bar" aria-label="Toggle the Right UI bar" type="button"></button></div>');

var rightBody = $rightUiBar.append('<div id="right-ui-bar-body"></div>');

/* Attach the toggle button click. */
$rightUiBar.find('#right-ui-bar-toggle').ariaClick({label : "Audio Controls and Passage List"}, () => $rightUiBar.toggleClass('stowed'));

/* Automatically show the contents of the StoryRightSidebar passage in the right-ui-bar-body element. */
postrender["Display Right Sidebar Contents"] = function (content, taskName) {
	setPageElement('right-ui-bar-body', 'StoryRightSidebar');
};

/*range slider stuff */

// dialog API macro set, by chapel; for sugarcube 2
// version 1.3.0
// see the documentation: https://github.com/ChapelR/custom-macros-for-sugarcube-2#dialog-api-macros

// <<dialog>> macro
Macro.add('dialog', {
       tags : ['onopen', 'onclose'],
    handler : function () {
        
        // handle args (if any)
        var errors = [];
        var content = '', onOpen = null, onClose = null;
        var title = (this.args.length > 0) ? this.args[0] : '';
        var classes = (this.args.length > 1) ? this.args.slice(1).flatten() : [];

        this.payload.forEach( function (pl, idx) {
            if (idx === 0) {
                content = pl.contents;
            } else {
                if (pl.name === 'onopen') {
                    onOpen = onOpen ? onOpen + pl.contents : pl.contents;
                } else {
                    onClose = onClose ? onClose + pl.contents : pl.contents;
                }
            }
        });
        
        // add the macro- class
        classes.push('macro-' + this.name);
        
        // dialog box
        Dialog.setup(title, classes.join(' '));
        Dialog.wiki(content);

        // should these be shadowWrapper-aware?
        if (onOpen && typeof onOpen === 'string' && onOpen.trim()) {
            $(document).one(':dialogopened', function () {
                $.wiki(onOpen);
            });
        }

        if (onClose && typeof onClose === 'string' && onClose.trim()) {
            $(document).one(':dialogclosed', function () {
                $.wiki(onClose);
            });
        }

        Dialog.open();
        
    }

});

// <<popup>> macro
Macro.add('popup', {
    handler : function () {
        
        // errors
        if (this.args.length < 1) {
            return this.error('need at least one argument; the passage to display');
        }
        if (!Story.has(this.args[0])) {
            return this.error('the passage ' + this.args[0] + 'does not exist');
        }
        
        // passage name and title
        var psg   = this.args[0];
        var title = (this.args.length > 1) ? this.args[1] : '';
        var classes = (this.args.length > 2) ? this.args.slice(2).flatten() : [];
        
        // add the macro- class
        classes.push('macro-' + this.name);
        
        // dialog box
        Dialog.setup(title, classes.join(' '));
        Dialog.wiki(Story.get(psg).processText());
        Dialog.open();
        
    }

});

// <<dialogclose>> macro
Macro.add('dialogclose', { 
    skipArgs : true, 
    handler : function () {
        Dialog.close();
    } 
});

(function () {
	"use strict";

	$(document).on(":liveupdate", function () {
		$(".macro-live").trigger(":liveupdateinternal");
	});

	Macro.add(['update', 'upd'], {
		handler: function handler() {
			$(document).trigger(":liveupdate");
		}
	});

	Macro.add(['live', 'l', 'lh'], {
		skipArgs: true,
		handler: function handler() {
			if (this.args.full.length === 0) {
				return this.error('no expression specified');
			}
			try {
				var statement = this.args.full;
				var result = toStringOrDefault(Scripting.evalJavaScript(statement), null);
				if (result !== null) {
					var lh = this.name === "lh";
					var $el = $("<span></span>").addClass("macro-live").wiki(lh ? Util.escape(result) : result).appendTo(this.output);
					$el.on(":liveupdateinternal", this.createShadowWrapper(function (ev) {
						var out = toStringOrDefault(Scripting.evalJavaScript(statement), null);
						$el.empty().wiki(lh ? Util.escape(out) : out);
					}));
				}
			} catch (ex) {
				return this.error("bad evaluation: " + (_typeof(ex) === 'object' ? ex.message : ex));
			}
		}
	});

	Macro.add(['liveblock', 'lb'], {
		tags: null,
		handler: function handler() {
			try {
				var content = this.payload[0].contents.trim();
				if (content) {
					var $el = $("<span></span>").addClass("macro-live macro-live-block").wiki(content).appendTo(this.output);
					$el.on(":liveupdateinternal", this.createShadowWrapper(function (ev) {
						$el.empty().wiki(content);
					}));
				}
			} catch (ex) {
				return this.error("bad evaluation: " + (_typeof(ex) === 'object' ? ex.message : ex));
			}
		}
	});
})();

$(document).trigger(":liveupdate");


/*live line count functions */

if (!window.SH){
  window.SH = {};
}
setup.countLines = () => {
  let el = document.getElementById('passages');
  let divHeight = el.offsetHeight;
  let lineHeight = parseInt(document.defaultView.getComputedStyle(el,null).getPropertyValue("line-height"));
  return Math.floor(divHeight / lineHeight) - 11;
};

// message macro, by chapel (with help from T.M. Edwards); for sugarcube 2
// version 1.0.1
// see the documentation: https://github.com/ChapelR/custom-macros-for-sugarcube-2#message-macro

//intialize namespace
setup.messageMacro = {};

// default text option:
setup.messageMacro.default = 'Help';

// <<message>> macro
Macro.add('message', {
    tags    : null,
    handler : function () {
        var message  = this.payload[0].contents;
        var $wrapper = $(document.createElement('span'));
        var $link    = $(document.createElement(this.args.includes('btn') ? 'button' : 'a'));
        var $content = $(document.createElement('span'));

        $link
            .wiki(this.args.length > 0 && this.args[0] !== 'btn' ? this.args[0] : setup.messageMacro.default)
            .ariaClick( this.createShadowWrapper( function () {
                if ($wrapper.hasClass('open')) {
                    $content
                        .css('display', 'none')
                        .empty();
                }
                else {
                    $content
                        .css('display', 'block')
                        .wiki(message);
                }

                $wrapper.toggleClass('open');
            }));

        $wrapper
            .attr('id', 'macro-' + this.name + '-' + this.args.join('').replace(/[^A-Za-z0-9]/g, ''))
            .addClass('message-text')
            .append($link)
            .append($content)
            .appendTo(this.output);
    }
});

/*attempt at mash */

document.getElementById("history-backward").addEventListener("click", myFunction);

function myFunction() {
  SimpleAudio.select(":playing").pause();
}

/*attempt over*/




var passageTitle = "hm doesn't work";
var un = "Drangles";

$(document).on(':passageend', function (ev) {
    
    passageTitle = ev.passage.title;
    if(un != "Drangles")
    {
        $("#userName").val(un);
        $("#userName").attr('value', un);
        
        document.getElementById('userName').value = un;
        AjaxCallWithPromise();
    }
});

function myFunction(){
    $("#userName").val(un);
    $("#userName").attr('value', un);
    document.getElementById('userName').value = "dicks";
}

document.addEventListener("submit", (e) => {
        
    try{
            const form = e.target;
    
        if(form["method"] == "post")
        {
            AjaxPost();
            e.preventDefault();
        }else if(form["method"] == "get")
        {		
            un = $("#userName").val();
            AjaxCallWithPromise();
            
            e.preventDefault();
        }
    }catch{
        
    }

    
});

function AjaxPost() {

    var dat = $("#feedbackBox").serializeArray();
    dat.push({name: 'passage', value: passageTitle});

    dat.push({name: 'userName', value: $("#userName").val()});

    //console.log($("#userName").val());

    $.ajax({
        url:'postFeedback.php',
        data:dat,
        type:'POST',
        success:function(data){

            console.log(data);
            $('#what-you-searched').html(data);
        },
        error:function(){
            console.log("Error");
        }
    });
}

function AjaxCallWithPromise() {
    var dat = $("#userName").serializeArray();
    dat.push({name: 'passage', value: passageTitle});

    $.ajax({
        url:'postFeedback.php',
        data:dat,
        type:'GET',
        success:function(data){

            $('#what-you-searched').html(data);
            
            $("#feedbackBox").val(data);
        },
        error:function(){
            console.log("Error");
        }
    });
}